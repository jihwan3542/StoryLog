캡슐화: 객체의 구성 요소들(데이터와 메소드)를 캡슐로 감싸서 보호하고 볼 수 없게 하는 것
캡슐화를 하더라도 객체들 간 정보 교환과 통신을 위해 객체의 일부 요소 공개 노출이 필요함

C++에서 객체는 멤버 변수와 멤버 함수로 구성됨

클래스: 객체를 정의하는 설계도로서, 클래스에 멤버 변수와 멤버 함수를 선언함
	클래스는 하나지만 객체를 여러 개를 생성 가능함. 이때, 각 객체는 각각 별도의 공간에 생성됨

[클래스 선언부]
class 클래스이름 {
public: //접근 지정자
// 멤버 변수 또는 멤버 함수
int var = 0; 클래스 선언부에서 멤버 변수 초기화 가능
int func() {return 0;}
}; //세미콜론으로 끝남

접근 지정자 종류
	public: 모든 접근 허용
	private: 외부 접근 불가, 클래스 내부에서만 접근 가능
	protected: 외부 접근 불가, 클래스 내부 및 상속받은 클래스에서 접근 가능

[클래스 구현부]
int 클래스명::함수명(매개변수) {
return 0;
}

클래스를 선언부과 구현부로 구분하는 이유는 클래스 재사용을 위해서 임
클래스를 사용할 때 선언부만 필요하기 때문임

객체 생성
Circle donut; //클래스명 객체명; 으로 객체를 생성함

객체의 멤버 접근
donut.radius //객체명.(멤버 변수명 또는 멤버 함수명)

객체 생성 시 메모리가 할당되고 main()에서 생성된 객체는 main()의 스택에 존재함

